Вариант 3. До 156 баллов
Разработайте класс CRational, моделирующий рациональное число и реализующий основные арифметические операций над рациональными числами.

Каркас класса CRational приведен ниже

class CRational
{
public:
    // Конструирует рациональное число, равное нулю (0/1)
    CRational();

    // Конструирует рациональное число, равное value (value/1)
    CRational(int value);

    // Конструирует рациональное число, равное numerator/denominator
    // Рациональное число должно храниться в нормализованном виде:
    // знаменатель положительный (числитель может быть отрицательным)
    // числитель и знаменатель не имеют общих делителей (6/8 => 3/4 и т.п.)
    // Если знаменатель равен нулю, должно конструироваться рациональное число, равное нулю,
    // либо должно быть выброшено исключение std::invalid_argument.
    CRational(int numerator, int denominator);

    // Возвращает числитель
    int GetNumerator()const;

    // Возвращает знаменатель (натуральное число)
    int GetDenominator()const;

    // Возвращает отношение числителя и знаменателя в виде числа double
    double ToDouble()const;

    // Прочие операторы согласно заданию
};
Реализуйте следующие операторы над рациональными числами. В результате данных операций должны получаться нормализованные рациональные (нормализация необходима для того, чтобы в результате арифметических операций избежать чрезмерных значений числителя и знаменателя, способных выйти за пределы диапазона int. например, (49/100 + 1/100) * 9/30 в денормализованном виде равно 450/3000, а в нормализованном – 3/20). числа.

№	Операция	Описание
1	Унарный + и -	Унарный минус возвращает рациональное число с противоположным знаком:
3
5
 =>
−
3
5

Унарный плюс рациональное число, равное текущему.
2	Бинарный +	Возвращает результат сложения двух рациональных чисел, рационального числа с целым, целого числа с рациональным (подсказка: есть возможность реализовать все три типа сложения: CRational+int, CRational+CRational, int+CRational, написав оператор сложения всего один раз. Подумайте, каким образом этого можно добиться.):
1
2
+
1
6
=
2
3

1
2
+
1
=
3
2

1
+
1
2
=
3
2
3	Бинарный -	Возвращает разность двух рациональных чисел, рационального числа и целого, либо целого числа и рационального (см. пояснение насчет бинарного оператора сложения):
1
2
−
1
6
=
1
3

1
2
−
1
=
−
1
2

1
−
1
2
=
1
2
4	+=	Выполняет увеличение рационального числа на величину второго рационального, либо целого числа (здесь так же можно реализовать поддержку обоих случаев сложения, написав оператор += всего один раз. Объясните, почему?):
1
2
+
=
1
6
→
2
3

1
2
+
=
1
→
3
2
5	-=	Выполняет уменьшение рационального числа на величину второго рационального либо целого числа (см. пояснение насчет оператора +=):
1
2
−
=
1
6
→
1
3

1
2
−
=
1
→
−
1
2
6	*	Возвращает результат произведения рациональных чисел, рационального и целого, либо целого и рационального (см. пояснение насчет бинарного оператора +):
1
2
∗
2
3
=
1
3

1
2
∗
(
−
3
)
=
−
3
2

7
∗
2
3
=
14
3
7	/	Возвращает частное двух рациональных чисел, рационального и целого, целого и рационального (см. пояснение насчет бинарного оператора +):
1
2
2
3
=
3
4

1
2
=
1
10

7
2
3
=
21
2
8	*=	Умножает значение первого рационального числа на другое рациональное, либо целое (см. пояснение насчет оператора +=):
1
2
∗
=
2
3
→
1
3

\frac{1}{2} *= 3→\frac{3}{2}
9	/=	Делит первое рациональное число на другое рациональное, либо целое (см. пояснение насчет оператора +=):
1
2
/
=
2
3
→
3
4

1
2
/
=
3
→
1
6

3
4
/
=
3
8
→
2
1
10	== и !=	Проверяют равенство (и неравенство) двух рациональных чисел, целого и рационального, рационального и целого (есть возможность реализовать все три варианта сравнения в операторах == и !=, разработав по одной версии операторов == и !=. Подумайте, как?):
1
2
==
1
2
→true
1
2
==
2
3
→false
4
1
==
4
→true
1
2
==
7
→false
3
==
3
1
→true
3
==
2
3
→false
1
2
!
=
1
2
→false
1
2
!
=
2
3
→true
4
1
!
=
4
→false
1
2
!
=
7
→true
3
!
=
3
1
→false
3
!
=
2
3
→true
11	<, <=, >, >=	Сравнивают два рациональных числа, рациональное с целым, целое с рациональным (см. указания насчет операторов != и ==):
1
2
>=
1
3
→true
1
2
<=
1
3
→false
3
1
>
2
→true
1
2
<
7
→true
3
<=
7
2
→true
3
>=
8
2
→false
12	<<	Оператор вывода рационального числа в выходной поток std::ostream в формате <числитель>/<знаменатель>, например: 7/15
13	>>	Оператор ввода рационального числа из входного потока std::istream в формате <числитель>/<знаменатель>, например: 7/15
В процессе разработки класса использование подхода TDD обязательно. Без автоматических тестов работа будет принята с коэффициентом 0.5.

Бонус в 30 баллов за возможность получения смешанной дроби из рационального числа

Смешанная дробь – дробь, представленная в виде суммы целого числа и правильной дроби (правильной называется дробь, у которой модуль числителя меньше модуля знаменателя.):

Например, рациональное число
9
4
 может быть представлено в виде смешанной дроби 2$\frac{1}{4}$, а число
−
9
4
 (минус девять четвертых) – в виде смешанной дроби:
−
2
+
(
−
1
4
)
=
−
(
2
1
4
)
.

class CRational
{
public:
    // Возвращает представление рационального числа в виде смешанной дроби
    std::pair<int, CRational> ToCompoundFraction()const;
};