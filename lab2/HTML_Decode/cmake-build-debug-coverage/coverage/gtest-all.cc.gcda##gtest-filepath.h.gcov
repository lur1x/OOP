        -:    0:Source:C:/Users/esipo/CLionProjects/OOP/lab2/HTML_Decode/cmake-build-debug-coverage/_deps/googletest-src/googletest/include/gtest/internal/gtest-filepath.h
        -:    0:Graph:C:\Users\esipo\CLionProjects\OOP\lab2\HTML_Decode\cmake-build-debug-coverage\_deps\googletest-build\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:C:\Users\esipo\CLionProjects\OOP\lab2\HTML_Decode\cmake-build-debug-coverage\_deps\googletest-build\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2008, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:// Google Test filepath utilities
        -:   31://
        -:   32:// This header file declares classes and functions used internally by
        -:   33:// Google Test.  They are subject to change without notice.
        -:   34://
        -:   35:// This file is #included in gtest/internal/gtest-internal.h.
        -:   36:// Do not include this header file separately!
        -:   37:
        -:   38:// IWYU pragma: private, include "gtest/gtest.h"
        -:   39:// IWYU pragma: friend gtest/.*
        -:   40:// IWYU pragma: friend gmock/.*
        -:   41:
        -:   42:#ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_
        -:   43:#define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_
        -:   44:
        -:   45:#include <string>
        -:   46:
        -:   47:#include "gtest/internal/gtest-port.h"
        -:   48:#include "gtest/internal/gtest-string.h"
        -:   49:
        -:   50:GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \
        -:   51:/* class A needs to have dll-interface to be used by clients of class B */)
        -:   52:
        -:   53:#if GTEST_HAS_FILE_SYSTEM
        -:   54:
        -:   55:namespace testing {
        -:   56:namespace internal {
        -:   57:
        -:   58:// FilePath - a class for file and directory pathname manipulation which
        -:   59:// handles platform-specific conventions (like the pathname separator).
        -:   60:// Used for helper functions for naming files in a directory for xml output.
        -:   61:// Except for Set methods, all methods are const or static, which provides an
        -:   62:// "immutable value object" -- useful for peace of mind.
        -:   63:// A FilePath with a value ending in a path separator ("like/this/") represents
        -:   64:// a directory, otherwise it is assumed to represent a file. In either case,
        -:   65:// it may or may not represent an actual file or directory in the file system.
        -:   66:// Names are NOT checked for syntax correctness -- no checking for illegal
        -:   67:// characters, malformed paths, etc.
        -:   68:
       1*:   69:class GTEST_API_ FilePath {
    %%%%%:   69-block 8
call    0 never executed
call    1 never executed
    $$$$$:   69-block 13
call    2 never executed
    $$$$$:   69-block 15
call    3 never executed
call    4 never executed
    $$$$$:   69-block 38
call    5 never executed
    %%%%%:   69-block 19
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    %%%%%:   69-block 40
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    %%%%%:   69-block 52
call   16 never executed
call   17 never executed
    %%%%%:   69-block 55
call   18 never executed
    %%%%%:   69-block 57
call   19 never executed
    $$$$$:   69-block 62
call   20 never executed
    $$$$$:   69-block 64
call   21 never executed
    $$$$$:   69-block 68
call   22 never executed
    $$$$$:   69-block 76
call   23 never executed
    $$$$$:   69-block 80
call   24 never executed
    $$$$$:   69-block 84
call   25 never executed
    $$$$$:   69-block 88
call   26 never executed
    $$$$$:   69-block 90
call   27 never executed
    %%%%%:   69-block 9
call   28 never executed
call   29 never executed
call   30 never executed
    %%%%%:   69-block 13
call   31 never executed
    $$$$$:   69-block 15
call   32 never executed
    $$$$$:   69-block 17
call   33 never executed
    $$$$$:   69-block 21
call   34 never executed
    %%%%%:   69-block 15
call   35 never executed
call   36 never executed
    $$$$$:   69-block 20
call   37 never executed
    $$$$$:   69-block 22
call   38 never executed
    %%%%%:   69-block 8
call   39 never executed
call   40 never executed
branch 41 never executed (fallthrough)
branch 42 never executed (throw)
    %%%%%:   69-block 14
call   43 never executed
    $$$$$:   69-block 17
call   44 never executed
call   45 never executed
    $$$$$:   69-block 19
call   46 never executed
    %%%%%:   69-block 7
call   47 never executed
call   48 never executed
branch 49 never executed (fallthrough)
branch 50 never executed (throw)
    $$$$$:   69-block 12
call   51 never executed
    $$$$$:   69-block 14
call   52 never executed
    %%%%%:   69-block 9
call   53 never executed
    $$$$$:   69-block 11
call   54 never executed
call   55 never executed
    $$$$$:   69-block 19
call   56 never executed
    %%%%%:   69-block 27
call   57 never executed
call   58 never executed
    $$$$$:   69-block 40
call   59 never executed
        1:   69-block 6
call   60 returned 1
branch 61 taken 0 (fallthrough)
branch 62 taken 1
    $$$$$:   69-block 18
call   63 never executed
call   64 never executed
        -:   70: public:
       1*:   71:  FilePath() : pathname_("") {}
        1:   71-block 2
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    %%%%%:   71-block 2
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:   71-block 2
call    8 never executed
    #####:   72:  FilePath(const FilePath& rhs) : pathname_(rhs.pathname_) {}
    %%%%%:   72-block 9
call    0 never executed
    %%%%%:   72-block 3
call    1 never executed
    %%%%%:   72-block 3
call    2 never executed
    %%%%%:   72-block 8
call    3 never executed
    %%%%%:   72-block 13
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -:   73:
       1*:   74:  explicit FilePath(const std::string& pathname) : pathname_(pathname) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:   74-block 11
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:   74-block 15
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   74-block 26
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   74-block 31
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%:   74-block 35
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%:   74-block 4
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%:   74-block 2
call   21 never executed
call   22 never executed
branch 23 never executed (fallthrough)
branch 24 never executed (throw)
call   25 never executed
branch 26 never executed (fallthrough)
branch 27 never executed (throw)
    %%%%%:   74-block 24
call   28 never executed
branch 29 never executed (fallthrough)
branch 30 never executed (throw)
    %%%%%:   74-block 8
call   31 never executed
branch 32 never executed (fallthrough)
branch 33 never executed (throw)
call   34 never executed
branch 35 never executed (fallthrough)
branch 36 never executed (throw)
    %%%%%:   74-block 9
call   37 never executed
branch 38 never executed (fallthrough)
branch 39 never executed (throw)
call   40 returned 1
branch 41 taken 1 (fallthrough)
branch 42 taken 0 (throw)
       1*:   75:    Normalize();
    %%%%%:   75-block 4
call    0 never executed
    %%%%%:   75-block 12
call    1 never executed
    %%%%%:   75-block 16
call    2 never executed
    %%%%%:   75-block 27
call    3 never executed
    %%%%%:   75-block 32
call    4 never executed
    %%%%%:   75-block 36
call    5 never executed
    %%%%%:   75-block 5
call    6 never executed
call    7 never executed
    %%%%%:   75-block 6
call    8 never executed
    %%%%%:   75-block 9
call    9 never executed
    %%%%%:   75-block 25
call   10 never executed
    %%%%%:   75-block 9
call   11 never executed
    %%%%%:   75-block 5
call   12 never executed
    %%%%%:   75-block 10
call   13 never executed
        1:   75-block 7
call   14 returned 1
        -:   76:  }
        -:   77:
    #####:   78:  FilePath& operator=(const FilePath& rhs) {
    #####:   79:    Set(rhs);
    #####:   80:    return *this;
    %%%%%:   80-block 39
    $$$$$:   80-block 74
call    0 never executed
        -:   81:  }
        -:   82:
       1*:   83:  void Set(const FilePath& rhs) { pathname_ = rhs.pathname_; }
    %%%%%:   83-block 38
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:   83-block 40
call    3 never executed
    %%%%%:   83-block 7
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:   83-block 8
    %%%%%:   83-block 9
call    7 never executed
    %%%%%:   83-block 5
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%:   83-block 6
    %%%%%:   83-block 7
call   11 never executed
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
        1:   83-block 5
        1:   83-block 6
call   15 returned 1
        -:   84:
    #####:   85:  const std::string& string() const { return pathname_; }
    %%%%%:   85-block 7
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:   85-block 18
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:   85-block 48
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%:   85-block 3
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%:   85-block 11
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    #####:   86:  const char* c_str() const { return pathname_.c_str(); }
    %%%%%:   86-block 14
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:   86-block 34
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:   86-block 5
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:   86-block 3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:   86-block 2
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%:   86-block 140
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
        -:   87:
        -:   88:  // Returns the current working directory, or "" if unsuccessful.
        -:   89:  static FilePath GetCurrentDir();
        -:   90:
        -:   91:  // Given directory = "dir", base_name = "test", number = 0,
        -:   92:  // extension = "xml", returns "dir/test.xml". If number is greater
        -:   93:  // than zero (e.g., 12), returns "dir/test_12.xml".
        -:   94:  // On Windows platform, uses \ as the separator rather than /.
        -:   95:  static FilePath MakeFileName(const FilePath& directory,
        -:   96:                               const FilePath& base_name, int number,
        -:   97:                               const char* extension);
        -:   98:
        -:   99:  // Given directory = "dir", relative_path = "test.xml",
        -:  100:  // returns "dir/test.xml".
        -:  101:  // On Windows, uses \ as the separator rather than /.
        -:  102:  static FilePath ConcatPaths(const FilePath& directory,
        -:  103:                              const FilePath& relative_path);
        -:  104:
        -:  105:  // Returns a pathname for a file that does not currently exist. The pathname
        -:  106:  // will be directory/base_name.extension or
        -:  107:  // directory/base_name_<number>.extension if directory/base_name.extension
        -:  108:  // already exists. The number will be incremented until a pathname is found
        -:  109:  // that does not already exist.
        -:  110:  // Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.
        -:  111:  // There could be a race condition if two or more processes are calling this
        -:  112:  // function at the same time -- they could both pick the same filename.
        -:  113:  static FilePath GenerateUniqueFileName(const FilePath& directory,
        -:  114:                                         const FilePath& base_name,
        -:  115:                                         const char* extension);
        -:  116:
        -:  117:  // Returns true if and only if the path is "".
      12*:  118:  bool IsEmpty() const { return pathname_.empty(); }
    %%%%%:  118-block 2
branch  0 never executed (fallthrough)
branch  1 never executed
       11:  118-block 2
branch  2 taken 1 (fallthrough)
branch  3 taken 10
branch  4 taken 0 (fallthrough)
branch  5 taken 1
        -:  119:
        -:  120:  // If input name has a trailing separator character, removes it and returns
        -:  121:  // the name, otherwise return the name string unmodified.
        -:  122:  // On Windows platform, uses \ as the separator, other platforms use /.
        -:  123:  FilePath RemoveTrailingPathSeparator() const;
        -:  124:
        -:  125:  // Returns a copy of the FilePath with the directory part removed.
        -:  126:  // Example: FilePath("path/to/file").RemoveDirectoryName() returns
        -:  127:  // FilePath("file"). If there is no directory part ("just_a_file"), it returns
        -:  128:  // the FilePath unmodified. If there is no file part ("just_a_dir/") it
        -:  129:  // returns an empty FilePath ("").
        -:  130:  // On Windows platform, '\' is the path separator, otherwise it is '/'.
        -:  131:  FilePath RemoveDirectoryName() const;
        -:  132:
        -:  133:  // RemoveFileName returns the directory path with the filename removed.
        -:  134:  // Example: FilePath("path/to/file").RemoveFileName() returns "path/to/".
        -:  135:  // If the FilePath is "a_file" or "/a_file", RemoveFileName returns
        -:  136:  // FilePath("./") or, on Windows, FilePath(".\\"). If the filepath does
        -:  137:  // not have a file, like "just/a/dir/", it returns the FilePath unmodified.
        -:  138:  // On Windows platform, '\' is the path separator, otherwise it is '/'.
        -:  139:  FilePath RemoveFileName() const;
        -:  140:
        -:  141:  // Returns a copy of the FilePath with the case-insensitive extension removed.
        -:  142:  // Example: FilePath("dir/file.exe").RemoveExtension("EXE") returns
        -:  143:  // FilePath("dir/file"). If a case-insensitive extension is not
        -:  144:  // found, returns a copy of the original FilePath.
        -:  145:  FilePath RemoveExtension(const char* extension) const;
        -:  146:
        -:  147:  // Creates directories so that path exists. Returns true if successful or if
        -:  148:  // the directories already exist; returns false if unable to create
        -:  149:  // directories for any reason. Will also return false if the FilePath does
        -:  150:  // not represent a directory (that is, it doesn't end with a path separator).
        -:  151:  bool CreateDirectoriesRecursively() const;
        -:  152:
        -:  153:  // Create the directory so that path exists. Returns true if successful or
        -:  154:  // if the directory already exists; returns false if unable to create the
        -:  155:  // directory for any reason, including if the parent directory does not
        -:  156:  // exist. Not named "CreateDirectory" because that's a macro on Windows.
        -:  157:  bool CreateFolder() const;
        -:  158:
        -:  159:  // Returns true if FilePath describes something in the file-system,
        -:  160:  // either a file, directory, or whatever, and that something exists.
        -:  161:  bool FileOrDirectoryExists() const;
        -:  162:
        -:  163:  // Returns true if pathname describes a directory in the file-system
        -:  164:  // that exists.
        -:  165:  bool DirectoryExists() const;
        -:  166:
        -:  167:  // Returns true if FilePath ends with a path separator, which indicates that
        -:  168:  // it is intended to represent a directory. Returns false otherwise.
        -:  169:  // This does NOT check that a directory (or file) actually exists.
        -:  170:  bool IsDirectory() const;
        -:  171:
        -:  172:  // Returns true if pathname describes a root directory. (Windows has one
        -:  173:  // root directory per disk drive.)
        -:  174:  bool IsRootDirectory() const;
        -:  175:
        -:  176:  // Returns true if pathname describes an absolute path.
        -:  177:  bool IsAbsolutePath() const;
        -:  178:
        -:  179: private:
        -:  180:  // Replaces multiple consecutive separators with a single separator.
        -:  181:  // For example, "bar///foo" becomes "bar/foo". Does not eliminate other
        -:  182:  // redundancies that might be in a pathname involving "." or "..".
        -:  183:  //
        -:  184:  // A pathname with multiple consecutive separators may occur either through
        -:  185:  // user error or as a result of some scripts or APIs that generate a pathname
        -:  186:  // with a trailing separator. On other platforms the same API or script
        -:  187:  // may NOT generate a pathname with a trailing "/". Then elsewhere that
        -:  188:  // pathname may have another "/" and pathname components added to it,
        -:  189:  // without checking for the separator already being there.
        -:  190:  // The script language and operating system may allow paths like "foo//bar"
        -:  191:  // but some of the functions in FilePath will not handle that correctly. In
        -:  192:  // particular, RemoveTrailingPathSeparator() only removes one separator, and
        -:  193:  // it is called in CreateDirectoriesRecursively() assuming that it will change
        -:  194:  // a pathname from directory syntax (trailing separator) to filename syntax.
        -:  195:  //
        -:  196:  // On Windows this method also replaces the alternate path separator '/' with
        -:  197:  // the primary path separator '\\', so that for example "bar\\/\\foo" becomes
        -:  198:  // "bar\\foo".
        -:  199:
        -:  200:  void Normalize();
        -:  201:
        -:  202:  // Returns a pointer to the last occurrence of a valid path separator in
        -:  203:  // the FilePath. On Windows, for example, both '/' and '\' are valid path
        -:  204:  // separators. Returns NULL if no path separator was found.
        -:  205:  const char* FindLastPathSeparator() const;
        -:  206:
        -:  207:  // Returns the length of the path root, including the directory separator at
        -:  208:  // the end of the prefix. Returns zero by definition if the path is relative.
        -:  209:  // Examples:
        -:  210:  // - [Windows] "..\Sibling" => 0
        -:  211:  // - [Windows] "\Windows" => 1
        -:  212:  // - [Windows] "C:/Windows\Notepad.exe" => 3
        -:  213:  // - [Windows] "\\Host\Share\C$/Windows" => 13
        -:  214:  // - [UNIX] "/bin" => 1
        -:  215:  size_t CalculateRootLength() const;
        -:  216:
        -:  217:  std::string pathname_;
        -:  218:};  // class FilePath
        -:  219:
        -:  220:}  // namespace internal
        -:  221:}  // namespace testing
        -:  222:
        -:  223:GTEST_DISABLE_MSC_WARNINGS_POP_()  //  4251
        -:  224:
        -:  225:#endif  // GTEST_HAS_FILE_SYSTEM
        -:  226:
        -:  227:#endif  // GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_
