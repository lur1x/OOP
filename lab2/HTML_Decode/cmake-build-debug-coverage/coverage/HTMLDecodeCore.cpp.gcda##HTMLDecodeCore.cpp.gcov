        -:    0:Source:C:/Users/esipo/CLionProjects/OOP/lab2/HTML_Decode/HTMLDecodeCore.cpp
        -:    0:Graph:C:\Users\esipo\CLionProjects\OOP\lab2\HTML_Decode\cmake-build-debug-coverage\CMakeFiles\HTML_DecodeTest.dir\HTMLDecodeCore.cpp.gcno
        -:    0:Data:C:\Users\esipo\CLionProjects\OOP\lab2\HTML_Decode\cmake-build-debug-coverage\CMakeFiles\HTML_DecodeTest.dir\HTMLDecodeCore.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "HTMLDecodeCore.hpp"
        -:    2:
function _Z10HTMLDecodeRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 11 returned 100% blocks executed 83%
       11:    3:std::string HTMLDecode(std::string const& html) {
       11:    4:    const std::array<std::pair<std::string_view, char>, 5> HTML_ENTITIES = {{
        -:    5:        {"&quot;", '"'},
        -:    6:        {"&apos;", '\''},
        -:    7:        {"&lt;", '<'},
        -:    8:        {"&gt;", '>'},
        -:    9:        {"&amp;", '&'}
        -:   10:    }};
        -:   11:
       11:   12:    std::string decodedHtml;
       11:   12-block 2
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:   13:    decodedHtml.reserve(html.size());
       11:   13-block 2
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
        -:   14:
        -:   15:    size_t pos = 0;
       35:   16:    while (pos < html.size()) {
       35:   16-block 21
branch  0 taken 29
branch  1 taken 6 (fallthrough)
        -:   17:
       29:   18:        size_t ampPos = html.find('&', pos);
        -:   19:
       29:   20:        if (ampPos == std::string::npos) {
       29:   20-block 3
branch  0 taken 5 (fallthrough)
branch  1 taken 24
        5:   21:            decodedHtml.append(html, pos, html.size() - pos);
        5:   21-block 4
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
       11:   22:            break;
        -:   23:        }
        -:   24:
       24:   25:        decodedHtml.append(html, pos, ampPos - pos);
       24:   25-block 5
call    0 returned 24
branch  1 taken 24 (fallthrough)
branch  2 taken 0 (throw)
        -:   26:
       24:   27:        size_t semicolonPos = html.find(';', ampPos);
        -:   28:
      24*:   29:        if (semicolonPos == std::string::npos) {
       24:   29-block 6
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####:   30:            decodedHtml += '&';
    %%%%%:   30-block 7
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   31:            pos = ampPos + 1;
    #####:   32:            continue;
    %%%%%:   32-block 9
        -:   33:        }
        -:   34:
       24:   35:        std::string_view entity(&html[ampPos], semicolonPos - ampPos + 1);
       24:   35-block 10
        -:   36:
       24:   37:        bool found = false;
       84:   38:        for (const auto& [htmlEntity, symbol] : HTML_ENTITIES) {
       24:   38-block 10
       83:   38-block 11
branch  0 taken 30 (fallthrough)
branch  1 taken 53
       84:   38-block 17
branch  2 taken 83
branch  3 taken 1 (fallthrough)
       90:   39:            if (entity == htmlEntity) {
       83:   39-block 11
branch  0 taken 30 (fallthrough)
branch  1 taken 53
       60:   39-block 14
       23:   40:                decodedHtml += symbol;
       23:   40-block 13
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23:   41:                pos = semicolonPos + 1; // Продолжаем поиск после точки с запятой
       23:   42:                found = true;
       23:   43:                break;
        -:   44:            }
        -:   45:        }
        -:   46:
       23:   47:        if (!found) {
       23:   47-block 16
        1:   48:            decodedHtml.append(entity);
        1:   48-block 18
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   49:            pos = semicolonPos + 1;
        1:   49-block 19
        -:   50:        }
        -:   51:    }
        -:   52:
       11:   53:    return decodedHtml;
       11:   53-block 22
    =====:   54:}
